make figures out automatically which files it needs to update ,based on which files have changed,
	it also automatically determines the proper order for updating files,in case one non-source file depends on another non-source file
	
	compiler to produce an object file ,lineker to produce an executable ,ar t oupdate a library,Tex or makeinfo to format documentation 

make rules and targets
	a rule in the makefile tells make how to execute a series of commands in order to build a target file from source files,
	it also specifies a list of dependencies of the target file ,all files used as inputs to the commands in the rule
	what a simple rule looks like 
		target dependencies ..
				commands	
					..
Makefile:规则格式
	target:prerequisites
		commands
	target:文件名,多个目标空格隔开/伪目标(phony)
	
		clean:
			rm *.o 删除所有文件,若文件中存在clean同名需要伪目标
		.PHONY: clean
		clean:
			rm *.o
	prerequisites: 通常是一组文件,目标分割,只要一个前置条件文件不存在或更新重新构建目标
		result.txt: source.txt
			cp source.txt result.txt,如果source.txt不存在需要添加生成语句
		source.txt:
			echo "source.txt">>source.txt
			....
		生成多个文件
			source: file1 file2 file3
	commands 命令如何构建目标文件,每行命令单独shell中执行,Shelle之间没有继承关系
				解决方法,可以写在一行或 \串接
		.ONESHELL:
		test:
			export var=hello;echo $$var
		或者
			export	var=hello;\
			echo &&var
	注释 #这是注释
	echoing:make会将每条命令注释输出,再执行命令如果不想输出在语句前加@
	Makefile通配符与Bash一致
	模式匹配:%匹配符
		%.o: %.c
		==a.o : a.c
	变量赋值:	test=hello make
				test:
					@echo $(test)
				shell变量以$开头 makefile引用shell变量需要连个$$
	内置变量
		CC:当前编译器
		MAKE: 当前构建工具
		CXX:c++编译器
		CPP:c与预处理器
		AS:编译汇编语言
	自动变量
		$@:指代当前目标
		$<:指代第一个前置条件
		$^:指代所有前置条件,空格分割
		$*:匹配符%匹配的部分
		(@D)/(@F):分别指向$@的目录名和文件名
a.txt: b.txt c.txt #确认b,c文件存在
	cat b.txt c.txt>a.txt #将两个文件合并输出为新文件	
make -f rules.txt #make根据rules.txt文件中的规则构建
make -file=rules.txt#构建哪个文件,依赖那些文件,当文件变动时如何重新构建它
	clean:
		rm *.o #clean是一个操作的名字,不是文件名,一般是文件名 #伪目标 .PHONY clean
只要一个前置文件不存在或者有更新目标据重新构建
	result.txt:source.txt
		cp source.txt result.txt# source.txt应该存在
		source.txt:
			echo "this is the source">source.txt
生成多个文件
	source:file1 file2 file3 #source是个伪目标,没有命令只有前置文件
命令commands
	每行命令之前必须有一个tab键 或者自己指定 .RECIPEPREFIX=>
											 all:
											 >echo hello,world
通配符:与bash一致 * ? [...]											
变量:如果一个变量指向另一个变量 
		v1=$(v2)
		定义时扩展(静态扩展)?运行时扩展(动态扩展)
			= 执行时扩展
			:= 定义时扩展
			?= 变量为空的时候赋值
			+= 将值追加到变量末尾
判断和循环
			ifeq($(CC),gcc)
				libs=$(libs_for_gcc)
			else
				libs=$(normal_libs)
			endif
			
			LIST=one two three
			all:
				for i in $(LIST):do\
					echo $$i;\
				done
函数:$(function arguments)
	 ${function arguments}
	 shell:执行shell命令
		srcfiles := $(shell echo src/{00..99}.txt)
	wildcard:替换bash通配符
		srcfiles:=$(wildcard src/*.txt)
	subst函数
		$(subst from,to,text)
		$(subst ee,EE, feet on the street)
		
		comma:=,
		empty:=
		space:=$(empty) $(empty)
		foo:=a b c
		bar:=$(subst $(space),$(comma),$(foo)))
		# bar is now 'a,b,c'
	patsubst函数
		$(patsubst pattern,replacement,text)
		$(patsubst %.c,%.o,x.cc bar.c)
	替换后缀名
		min: $(OUTPUT:.js=.min.js)
	
makefile实例
			.PHONE: cleanall cleanobj cleandiff
			cleanall : cleanobj cleandiff
				rm program
			cleanobj :
				rm *.o
			cleandiff:
				rm *.diff
编译c项目
edit : main.o kdb.o command.o display.o
	cc -o edit main.o kdb.o command.o display.o
main.o : main.c defs.h
	cc -c main.c
kdb.o:kdb.c defs.h commad.have
	cc -c command.c
command.o : command.c defs.h command.h
	cc -c command.c
display.o :display.c defs.h
	cc c display.c
clean:
	rm edit main.o kdb.o command.o display.o
		