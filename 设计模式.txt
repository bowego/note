总原则:开闭原则OpenClosePrinciple:对扩展开放,对修改关闭
单一职责原则:不要存在多余一个导致类变更的原因,每个类应该实现单一的职责,否则就应该对类进行拆分
里氏替换原则:任何基类可以出现的地方,子类一定能够出现,子类尽量不要对父类的方法重写重载,因为父类代表定义好的结构,子类不应该随便破坏它
依赖倒转原则:面向接口编程,依赖于抽象而不是依赖于具体,要实现一个功能,如果一个父类能够实现就不要使用子类
接口隔离原则:每个接口中不存在子类用不到却必须实现的方法,如果不然就将接口拆分
迪米特法则:一个类对自己以来的类知道的越少越好,一个类只与直接的朋友通信,陌生的类不要作为局部变量出现在类中
合成复用原则:尽量首先使用合成/聚合的方式而不是使用继承

工厂模式:调用工厂不同方法产生不同对象,或者根据不同参数产生不同对象,对象的产生对客户端/使用者是透明的
		 简单工厂模式:单方法,多方法,多静态方法
工厂方法模式:定义了工厂接口,不同的子类会产生不同的对象,/多个工厂接口的实现类
			 一个抽象产品类,可以派生出多个具体产品类
			 一个抽象工厂类,可以派生出多个具体工厂类
			 每个具体工厂类只能创建一个具体产品类的实例
抽象工厂模式:定义了工厂接口,不同的子类产生不同[族]的对象,一个实现类会产生一族的很多对象.
			 多个抽象产品类可以派生出多个具体产品类
			 一个抽象工厂类,可以派生出多个具体工厂类
			 每个具体工厂类可以创建多个具体产品的实例,也就是创建的是一个产品线下的多个产品
抽象工厂就像工厂,工厂方法就像是工厂的一种产品线
			 
单例模式:私有化构造方法,只在内存中保存一个对象,获取对象的方法入口第一次获取对象的时候创建对象(加锁),以后直接返回唯一的对象引用
	
建造者模式:

原型模式Prototype:将一个对象作为原型对其进行复制克隆

结构模式:适配器模式:类的适配器模式  :接口的方法与类的方法名称相同,适配器类实现接口继承类,继承的类种的方法自动实现接口中的方法
									 当想让一个类转换成另一个新的接口时,可以使用类的适配器模式,创建一个新类,继承原有的类实现新的接口即可
					对象的适配器模式:继承一个接口,实现方法的时候调用一个类变量的方法
									 将一个对象转换成满足另一个新接口的对象,创建一个Wrapper类,持有原类的一个实例,实现新的接口,调用实例的方法.
					接口的适配器模式:一个接口有太多方法,写一个抽象类空实现所有方法,继承这个类,只覆盖需要的方法
									 当不希望实现一个接口中的所有方法.
		 装饰模式:decorator:两个类实现一个接口,一个类的持有另一个类的实例,实现方法的时候调用另一个类的方法,对另一个类的方法进行了增强
				  给一个对象增加一些新的功能,而且是动态的,对不同的类的增强是相同的,动态地为一个对象增加功能
		 代理模式:代理类和被代理类实现一个接口,代理类持有被代理类的一个实例,实现方法的时候调用另一个类的方法,对被代理的类进行了增强
		 外观模式:解决类与类之间的依赖关系,将他们的关系放大哦一个facade类中,一个计算机的启动过程包括cpu,memory,disk,将启动过程封装到startup方法之中
		 
		 桥接模式:一个接口,多个实现类,定义一个桥类,桥持有一个接口的实现,有接口同名方法,调用桥的方法的时候,最终个调用的是他持有的接口实现类的方法
		 组合模式:又叫部分-整体模式,在处理类似属性结构的问题的时候比较方便,TreeNode包含一个集合存放子node,Tree包含一个TreeNode实例
		 享元模式:flyweight:实现对象的共享,共享池,当系统中对象多的时候可以减少内存,通常与工厂模式一起使用,将多个具有相同属性的对象放入一个集合,写一个类持有,当需要对象的时候如果有符合条件
				  的对象放回没有的话创建一个新的返回.
		 