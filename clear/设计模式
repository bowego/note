https://www.w3cschool.cn/java/java-visitor-pattern.html
设计模式
	单例模式：
		private static O o=new O
		private O(){}
		publi static O getInstance()
	建造模式：建造器模式：builder->create|someBasicObject[completeObject 例如springBeanfactory mybatisConfiguration 
			 原型模式：将对象缓存起来复用
			 工厂模式：对客户端隐藏对象创建的具体过程，基本的输入返回一个对象
			 抽象工厂模式：工厂的工厂，基本输入返回一个对象工厂
	结构模式：代理|适配器
		适配器模式：一个翻译转发不同的语言给其他翻译  都有一个中间层
		桥接模式：一个老板转发不同的需求给手下人员
		
		过滤器模式：使用不同的条件过滤对象，通过逻辑操作连接在一起
		组合模式：一个对象包含另外一组对象
		
		装饰模式：创建一个修饰器类包装原始类	主要用于类中代码的拓展
		代理模式：创建具有原始接口的对象，装饰/被代理的类外部不可见 客户端不关心被代理的类
		外观模式：外观模式隐藏系统复杂性，为客户端提供一个简单接口
	行为模式: 观察者|模板方法
		责任链模式：为请求创建一个接受者对象列表，每个接受者包含对另一个接受器的引用，并在处理完成之后将请求传递给下一个对象
		命令模式：Invoker对象->invoke|Command对象 命令操纵对象
		迭代器模式：顺序访问集合对象的元素，抽象底层的表示，hasNext,getNext
		观察者模式：用于一个对象被修改的时候通知相关的对象
		中介者模式：减少多个对象之间的通信
		解释器模式：解释器对象->多个解释器对象->复合解释器对象，解释器通常用来验证语言语法或表达
		状态模式：状态对象->改变上下文对象状态
		空对象模式：预防出现空指针，表明没有这个状态的对象但不想出现空指针
		策略模式：上下文对象，使用不同的策略对象
		模板方法模式：父抽象类公开抽象方法供给子类实现，弗雷的另一些方法使用抽象方法实现业务逻辑
		访问者模式：元素对象接受访问者对象，访问者对象操作元素对象
		MVC模式：模型携带数据对象，视图：可视化UI逻辑，控制器引用模型视图
		DAO模式：模型，访问对象接口，访问对象实现类